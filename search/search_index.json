{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dynatrace Observability Lab: Syslog Ingest","text":"<p>Support Policy</p> <p>This is a demo project created by the Developer Relations team at Dynatrace, showcasing integrations with open source technologies.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p> <p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p> <p>Select Execution Mode</p> <p>Please choose a way to run this demo. When you have chosen, leave the selection toggled as this ensure the correct instructions are given throughout this tutorial.</p> Run in CloudRun Locally <p>This is the easiest option. A new tab will open in your browser and everything necessary will be pre-installed.</p> <p>This option uses GitHub Codespaces and is usually free (GitHub provides credits each month).</p> <p>Use this option if you want to run this demo on your own machine.</p> <p> M3 and M4 Macs seem to currently have issues with Docker. We are investigating. If you have issues, choose the \"Run in Cloud\" option for now.</p> <p>To make this work, you'll need the following installed:</p> <ul> <li>Visual Studio Code</li> <li>The Microsoft Dev Containers extension in Visual Studio Code</li> <li>The Dev Containers CLI</li> <li>Ability to clone this repository locally (if you don't know what this means, use the \"run in cloud\" option)</li> </ul> <p>This hands on Observability Lab will show how to ingest syslog log data into Dynatrace via the Dynatrace collector.</p> <p> </p>"},{"location":"#syslog-via-activegate","title":"Syslog via ActiveGate","text":"<p>If you already have an ActiveGate deployed and / or prefer to use an ActiveGate for syslog ingest, follow these instructions instead. Whether the OpenTelemetry collector or ActiveGate is used, the end result is the same.</p> <ul> <li>Click here to begin </li> </ul>"},{"location":"cleanup/","title":"6. Cleanup","text":"<p>To cleanup resources, go to https://github.com/codespaces and delete the codespace.</p> <p>You may also want to deactivate or delete the API token.</p>"},{"location":"cleanup/#whats-next","title":"What's Next?","text":""},{"location":"getting-started/","title":"2. Getting Started","text":"<p>You will need to collect some information before you can begin.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Dynatrace tenant (sign up for a free trial)</li> <li>A Dynatrace API token with <code>logs.ingest</code> permissions (see below)</li> </ul>"},{"location":"getting-started/#format-url","title":"Format URL","text":"<p>Make a note of your Dynatrace tenant ID. It is the first bit of your URL (eg. abc12345 in the following examples):</p> <pre><code>https://abc12345.live.dynatrace.com\nhttps://abc12345.apps.dynatrace.com\n</code></pre> <p>Reformat the URL like this: <code>https://TENANT_ID.live.dynatrace.com</code></p> <p>eg. <code>https://abc12345.live.dynatrace.com</code></p>"},{"location":"getting-started/#environment-type","title":"Environment Type","text":"<p>Make a note of your environment type. The above environment type is <code>live</code>. If in doubt, use <code>live</code>.</p>"},{"location":"getting-started/#create-api-token","title":"Create API Token","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code> and search for <code>access tokens</code></li> <li>Create a new access token with the <code>logs.ingest</code> permission</li> </ul> <p>You have all the necessary details and are ready to get started.</p> <ul> <li>Click here to continue </li> </ul>"},{"location":"resources/","title":"8. Resources","text":"<ul> <li> Already have an ActiveGate Deployed? Ingest syslog via an ActiveGate</li> </ul>"},{"location":"run-demo/","title":"4. Run Demo","text":"<p>Now that the mechanics of the environment are understood, it is time to use it.</p>"},{"location":"run-demo/#start-collector","title":"Start Collector","text":"<p>Run the following command to start the collector:</p> <pre><code>source /workspaces/$RepositoryName/.env\n/workspaces/$RepositoryName/dynatrace-otel-collector --config=/workspaces/$RepositoryName/config.yaml\n</code></pre>"},{"location":"run-demo/#generate-syslog-data","title":"Generate syslog Data","text":"<p>Open a new terminal and generate a single syslog message and send to the collector:</p> <pre><code>python3 /workspaces/$RepositoryName/syslog_generator.py --host 127.0.0.1 --port 54526 --file /workspaces/$RepositoryName/sample_log_lines.log --count 1\n</code></pre> <p>Output like this will be shown:</p> <pre><code>[+] Sending 1 messages to 127.0.0.1 on port 54526\n[+] Sent: Aug 28 00:48:56: Log line 2\n</code></pre> <ul> <li>Click here to continue </li> </ul>"},{"location":"start-demo/","title":"3. Start Demo","text":""},{"location":"start-demo/#start-demo","title":"Start Demo","text":"Run in CloudRun Locally <p>Enter Required Information</p> <p>During the next step you will be prompted for some details.</p> <p>Enter the relevant details in the GitHub form.</p> <p>Click this button to launch the demo in a new tab.</p> <p></p> <ul> <li>Clone the repository to your local machine</li> </ul> <pre><code>git clone https://github.com/dynatrace/obslab-syslog\n</code></pre> <ul> <li>Open the folder in Visual Studio code</li> <li>Ensure the Microsoft Dev Containers extension and Dev Containers CLI are installed in VSCode</li> <li>Open a new terminal in VSCode and set your environment variables as appropriate:</li> </ul> <pre><code>set DT_ENVIRONMENT_ID=abc12345\nset DT_ENVIRONMENT_TYPE=live\nset DT_API_TOKEN=dt0c01.******.***********\n</code></pre> <ul> <li>Start Docker / Podman</li> <li>Create the environment</li> </ul> <pre><code>devcontainer up\n</code></pre> <p>It will take a few moments but you should see:</p> <pre><code>{\"outcome\":\"success\",\"containerId\":\"...\",\"remoteUser\":\"root\",\"remoteWorkspaceFolder\":\"/workspaces/obslab-jmeter\"}\n</code></pre> <ul> <li>Connect to the demo environment. This will launch a new Visual Studio Code window</li> </ul> <pre><code>devcontainer open\n</code></pre> <p>In the new Visual Studio code window, open a new terminal and continue with the tutorial.</p>"},{"location":"start-demo/#understand-demo-environment","title":"Understand Demo Environment","text":"<p>The Dynatrace OpenTelemetry Collector (<code>./dynatrace-otel-collector</code>) is automatically downloaded at startup. The collector is the syslog server. This collector distribution is officially supported by Dynatrace.</p> <p>Data will be sent to the collector (from a device) and the collector will forward that data to Dynatrace.</p> <p>The collector requires a configuration file. This is also already present (<code>config.yaml</code>).</p> <p>To generate syslog data, we need a \"fake\" device to generate the data and send it to the syslog server (ie. the collector). For this, we use a Python script (<code>syslog_generator.py</code>).</p> <p>The Python script:</p> <ul> <li>Reads <code>sample_log_lines.log</code></li> <li>Uses these logs lines as a seed to generate random syslog entries<ul> <li>The <code>host</code>, <code>tag</code>, <code>level</code> and <code>pid</code> are randomised for each log line</li> </ul> </li> <li>Sends the syslog entry via UDP to the collector</li> </ul>"},{"location":"start-demo/#understand-collector-configuration","title":"Understand Collector Configuration","text":"<p>Understanding the configuration of the collector is key to understanding how the data gets from your devices into Dynatrace.</p> <p>Note: You do not need to modify <code>config.yaml</code> file.</p>"},{"location":"start-demo/#receivers","title":"Receivers","text":"<pre><code>receivers:\n  syslog:\n    udp:\n      listen_address: \"127.0.0.1:54526\"\n    protocol: rfc3164\n</code></pre> <p>The receivers block describes how data is received by the collector.</p> <p>In this case, the syslog receiver is listening for incoming <code>UDP</code> connections on port <code>54526</code> and expecting incoming messages to by formatted in RFC3164 format.</p>"},{"location":"start-demo/#exporters","title":"Exporters","text":"<pre><code>exporters:\n  debug:\n    verbosity: detailed\n  otlphttp:\n    endpoint: \"https://YourTenantID.live.dynatrace.com/api/v2/otlp\"\n    headers:\n      Authorization: \"Api-Token ${env:DT_API_TOKEN}\"\n</code></pre> <p>The exporters block defines what happens to the data at the point it leaves the collector.</p> <p>The <code>otlphttp</code> exporter sends data to an endpoint in OpenTelemetry Protocol (OTLP) format via HTTPS. Dynatrace natively understands the OTLP format.</p> <p>Notice that an environment variables is referenced: <code>DT_API_TOKEN</code> you may recall these from the form you completed when the codespace started. The Dynatrace URL is automatically build (by the codespace at startup) and placed into the config.yaml file. You do not need to change <code>config.yaml</code>.</p> <p>These environment variables are already set for you, so you don't need to do anything else.</p>"},{"location":"start-demo/#pipelines","title":"Pipelines","text":"<pre><code>service:\n  pipelines:\n    logs:\n      receivers: [syslog]\n      exporters: [otlphttp]\n</code></pre> <p>The pipelines block defines how the collector components are connected in an end-to-end pipeline.</p> <p>In this case, <code>1</code> pipeline (dealing with log data) is defined. This pipeline will receive data using the <code>syslog</code> receiver and export it to the <code>otlphttp</code> exporters simultaneously.</p> <ul> <li>Click here to continue </li> </ul>"},{"location":"view-data/","title":"5. View Data","text":"<p>It is time to view the data in Dynatrace.</p> <p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code> search for <code>notebooks</code></li> <li>Add a new section for <code>logs</code></li> <li>Search for:</li> </ul> <pre><code>fetch logs\n| filter matchesPhrase(content, \"Log line\")\n</code></pre> <p></p> <p>Scroll to the right on the log line. Notice that Dynatrace natively understands syslog and has automatically mapped the fields to their human readable names.</p> <p></p> <p>These fields can be used to filter, group or parse log data further.</p> <p>For example, the following query shows all log lines containing the text <code>Log line</code> split by the <code>priority</code>, <code>hostname</code> and <code>proc_id</code> fields:</p> <pre><code>fetch logs\n| filter contains(content, \"Log line\")\n| summarize logCount = count(), by:{priority, hostname, proc_id}\n| sort logCount desc\n</code></pre> <p></p>"},{"location":"view-data/#congratulations","title":"Congratulations","text":"<p>You have succesfully ingested syslog data into Dynatrace.</p> <p>This Observability lab is now complete.</p> <ul> <li>Click here to cleanup your environment </li> </ul>"},{"location":"whats-next/","title":"7. What's Next?","text":"<p>This tutorial demonstrates how to ingest syslog via the OpenTelemetry collector.</p> <p>You can also ingest syslog in these ways:</p> <ul> <li>Using an ActiveGate</li> <li>Using fluentd</li> </ul> <ul> <li>View all related resources </li> </ul>"},{"location":"snippets/codespace-details-warning-box/","title":"Codespace details warning box","text":"<p>Enter Required Information</p> <p>During the next step you will be prompted for some details.</p> <p>Enter the relevant details in the GitHub form.</p>"},{"location":"snippets/disclaimer/","title":"Disclaimer","text":"<p>Support Policy</p> <p>This is a demo project created by the Developer Relations team at Dynatrace, showcasing integrations with open source technologies.</p> <p>Support is provided via GitHub issues only. The materials provided in this repository are offered \"as-is\" without any warranties, express or implied. Use them at your own risk.</p>"},{"location":"snippets/select-execution-mode/","title":"Select execution mode","text":"<p>Select Execution Mode</p> <p>Please choose a way to run this demo. When you have chosen, leave the selection toggled as this ensure the correct instructions are given throughout this tutorial.</p> Run in CloudRun Locally <p>This is the easiest option. A new tab will open in your browser and everything necessary will be pre-installed.</p> <p>This option uses GitHub Codespaces and is usually free (GitHub provides credits each month).</p> <p>Use this option if you want to run this demo on your own machine.</p> <p> M3 and M4 Macs seem to currently have issues with Docker. We are investigating. If you have issues, choose the \"Run in Cloud\" option for now.</p> <p>To make this work, you'll need the following installed:</p> <ul> <li>Visual Studio Code</li> <li>The Microsoft Dev Containers extension in Visual Studio Code</li> <li>The Dev Containers CLI</li> <li>Ability to clone this repository locally (if you don't know what this means, use the \"run in cloud\" option)</li> </ul>"},{"location":"snippets/start-demo-run-in-cloud/","title":"Start demo run in cloud","text":"<p>Click this button to launch the demo in a new tab.</p> <p></p>"},{"location":"snippets/start-demo-run-locally/","title":"Start demo run locally","text":"<ul> <li>Clone the repository to your local machine</li> </ul> <pre><code>git clone https://github.com/dynatrace/obslab-syslog\n</code></pre> <ul> <li>Open the folder in Visual Studio code</li> <li>Ensure the Microsoft Dev Containers extension and Dev Containers CLI are installed in VSCode</li> <li>Open a new terminal in VSCode and set your environment variables as appropriate:</li> </ul> <pre><code>set DT_ENVIRONMENT_ID=abc12345\nset DT_ENVIRONMENT_TYPE=live\nset DT_API_TOKEN=dt0c01.******.***********\n</code></pre> <ul> <li>Start Docker / Podman</li> <li>Create the environment</li> </ul> <pre><code>devcontainer up\n</code></pre> <p>It will take a few moments but you should see:</p> <pre><code>{\"outcome\":\"success\",\"containerId\":\"...\",\"remoteUser\":\"root\",\"remoteWorkspaceFolder\":\"/workspaces/obslab-jmeter\"}\n</code></pre> <ul> <li>Connect to the demo environment. This will launch a new Visual Studio Code window</li> </ul> <pre><code>devcontainer open\n</code></pre> <p>In the new Visual Studio code window, open a new terminal and continue with the tutorial.</p>"},{"location":"snippets/view-code/","title":"View code","text":"<p>View the Code</p> <p>The code for this repository is hosted on GitHub. Click the \"View Code on GitHub\" link above.</p>"},{"location":"testing/helpers/","title":"Helpers","text":"<pre><code>sleep 15\n</code></pre>"}]}